package com.example.talentos.controllertest;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityNotFoundException;

import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import com.example.talentos.dto.TalentoDTO;
import com.example.talentos.entidades.Talento;
import com.example.talentos.services.TalentoService;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
public class TalentoControllerTest {
	private int idExistente;
	private int idInexistente;
	private TalentoDTO talentoExistente;
	private Talento talentoNovo;
	private List<Talento> lista;
	
	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private TalentoService service;
	
	@Autowired
	ObjectMapper objectMapper;
	
	@BeforeEach
	void setup() {
		idExistente = 1;
		idInexistente = 2;
		talentoExistente = new TalentoDTO(idExistente, "Joana", "da Silva", "48999997070", "joana@gmail.com", "Desenvolvedora", "Florian√≥polis", "SC", null);
		talentoNovo = new Talento();
		lista = new ArrayList<>();
		
		// pesquisar por id
		Mockito.when(service.getById(idExistente)).thenReturn(talentoExistente);
		Mockito.when(service.getById(idInexistente)).thenThrow(EntityNotFoundException.class);
		
	}
	
}
